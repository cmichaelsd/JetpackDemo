package com.colemichaels.jetpackdemo.ui.main

import android.util.Log
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel

class MainViewModel(private val savedStateHandle: SavedStateHandle) : ViewModel() {

    // Since two-way data binding is set to this state from the layout I decided to save state upon each set, do whatever method works best for you.
    var dollarValue: MutableLiveData<String> = savedStateHandle.getLiveData(DOLLAR_VALUE_KEY)
        set(value) {
            field = value
            savedStateHandle[DOLLAR_VALUE_KEY] = value
        }

    // Since this is set for one-way data binding I save state only when a new result is generated by the buttons on click function.
    val result: MutableLiveData<Float> get() = savedStateHandle.getLiveData(RESULT_KEY)

    /*
     * How to test:
     * 1) Enter a value
     * 2) Convert value
     * 3) Set app into the background
     * 4) Terminate application from Logcat menu
     * 5) Reopen the application
     * 6) Data should be restored from the view models saved state
     */
    init {
        Log.i("SAVED", savedStateHandle.keys().toString())
    }

    fun convertValue() {
        dollarValue.let {
            val result = if (!it.value.equals("")) it.value!!.toFloat().times(USD_TO_EU_RATE) else 0f
            setResult(result)
        }
    }

    private fun setResult(value: Float) {
        result.value = value
        savedStateHandle[RESULT_KEY] = result.value
    }

    companion object {
        private const val RESULT_KEY = "euro_value"
        private const val DOLLAR_VALUE_KEY = "dollar_value_key"
        private const val USD_TO_EU_RATE = 0.74f
    }
}
